version: "3.1"

services:
  node-exporter:
    container_name: node-exporter      
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.systemd 
      - --collector.processes
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - "9100:9100"
    restart: always
    networks:
      - mynet
    deploy:
      mode: global

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - "prometheus"
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana

  prometheus:
    container_name: prometheus      
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/config
    command:
      - '--config.file=/etc/config/prometheus.yml'
    restart: always
    depends_on:
      - "node-exporter"
      - "app"
    ports:
      - 9090:9090
    networks:
      - mynet

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      - POSTGRES_USER=${TEST_DB_USER}
      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      - POSTGRES_DB=${TEST_DB_NAME}
    networks:
      - mynet
    ports:
      - '${TEST_DB_PORT}:${TEST_DB_PORT}'
    volumes:
      - './_postgres:/docker-entrypoint'
      - 'dbData:/var/lib/postgresql/data'

  session:
    build:
      context: .
      dockerfile: ./Dockerfile-session
    container_name: auth
    ports:
      - "8082:8082"
    expose:
      - "8082"
    volumes:
      - ./:/auth
    restart: on-failure
    networks:
      - mynet

  mail:
    build:
      context: .
      dockerfile: ./Dockerfile-mail
    container_name: mail
    environment:
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    ports:
      - "8084:8084"
    expose:
      - "8084"
    volumes:
      - ./:/mail
    restart: on-failure
    networks:
      - mynet

  orders:
    build:
      context: .
      dockerfile: ./Dockerfile-orders
    container_name: orders
    ports:
      - "8083:8083"
    expose:
      - "8083"
    environment:
      - DB_PORT=${DB_PORT}
      - TEST_POSTGRES_USER=${TEST_DB_USER}
      - TEST_POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      - TEST_POSTGRES_DB=${TEST_DB_NAME}
      - TEST_DATABASE_HOST=${TEST_DB_HOST}
      - TEST_DATABASE_PORT=${TEST_DB_PORT}
    volumes:
      - ./:/orders
    restart: on-failure
    depends_on:
      - postgres
      - session
    networks:
      - mynet
    links:
      - postgres:postgres

  app:
    container_name: go
    environment:
      - DB_PORT=${DB_PORT}
      - TEST_POSTGRES_USER=${TEST_DB_USER}
      - TEST_POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      - TEST_POSTGRES_DB=${TEST_DB_NAME}
      - TEST_DATABASE_HOST=${TEST_DB_HOST}
      - TEST_DATABASE_PORT=${TEST_DB_PORT}
    build:
      context: .
    ports:
      - 8080:8080
    restart: on-failure
    links:
      - postgres:postgres
    volumes:
      - ./:/app
      - /home/ubuntu/img/general:/avatars
    depends_on:
      - "postgres"
      - "session"
      - "orders"
    networks:
      - mynet

volumes:
  grafana-storage:
  prometheus_data:
  .:
    external: true
  dbData:

networks:
  mynet:
    driver: bridge

