// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeServDomainModel(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			if m, ok := out.Body.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Body.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Body = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeServDomainModel(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Body != nil {
		const prefix string = ",\"body\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.Body.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Body.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Body))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeServDomainModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeServDomainModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeServDomainModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeServDomainModel(l, v)
}
func easyjsonC80ae7adDecodeServDomainModel1(in *jlexer.Lexer, out *Promocode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "promocode":
			out.Promocode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeServDomainModel1(out *jwriter.Writer, in Promocode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"promocode\":"
		out.RawString(prefix[1:])
		out.String(string(in.Promocode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Promocode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeServDomainModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Promocode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeServDomainModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Promocode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeServDomainModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Promocode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeServDomainModel1(l, v)
}
func easyjsonC80ae7adDecodeServDomainModel2(in *jlexer.Lexer, out *Mail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "usermail":
			out.Useremail = string(in.String())
		case "promocode":
			out.Promocode = string(in.String())
		case "orderstatus":
			out.OrderStatus = string(in.String())
		case "orderid":
			out.OrderID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeServDomainModel2(out *jwriter.Writer, in Mail) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"usermail\":"
		out.RawString(prefix)
		out.String(string(in.Useremail))
	}
	if in.Promocode != "" {
		const prefix string = ",\"promocode\":"
		out.RawString(prefix)
		out.String(string(in.Promocode))
	}
	if in.OrderStatus != "" {
		const prefix string = ",\"orderstatus\":"
		out.RawString(prefix)
		out.String(string(in.OrderStatus))
	}
	if in.OrderID != 0 {
		const prefix string = ",\"orderid\":"
		out.RawString(prefix)
		out.Int(int(in.OrderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeServDomainModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeServDomainModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeServDomainModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeServDomainModel2(l, v)
}
func easyjsonC80ae7adDecodeServDomainModel3(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			if m, ok := out.Error.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Error.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Error = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeServDomainModel3(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Error != nil {
		const prefix string = ",\"error\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.Error.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Error.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Error))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeServDomainModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeServDomainModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeServDomainModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeServDomainModel3(l, v)
}
func easyjsonC80ae7adDecodeServDomainModel4(in *jlexer.Lexer, out *CreateComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "itemid":
			out.ItemID = int(in.Int())
		case "userid":
			out.UserID = int(in.Int())
		case "pros":
			out.Pros = string(in.String())
		case "cons":
			out.Cons = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeServDomainModel4(out *jwriter.Writer, in CreateComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"itemid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ItemID))
	}
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	if in.Pros != "" {
		const prefix string = ",\"pros\":"
		out.RawString(prefix)
		out.String(string(in.Pros))
	}
	if in.Cons != "" {
		const prefix string = ",\"cons\":"
		out.RawString(prefix)
		out.String(string(in.Cons))
	}
	if in.Comment != "" {
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeServDomainModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeServDomainModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeServDomainModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeServDomainModel4(l, v)
}
func easyjsonC80ae7adDecodeServDomainModel5(in *jlexer.Lexer, out *CommentDB) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "itemid":
			out.ItemID = int(in.Int())
		case "userid":
			out.UserID = int(in.Int())
		case "pros":
			out.Pros = string(in.String())
		case "cons":
			out.Cons = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeServDomainModel5(out *jwriter.Writer, in CommentDB) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"itemid\":"
		out.RawString(prefix)
		out.Int(int(in.ItemID))
	}
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	if in.Pros != "" {
		const prefix string = ",\"pros\":"
		out.RawString(prefix)
		out.String(string(in.Pros))
	}
	if in.Cons != "" {
		const prefix string = ",\"cons\":"
		out.RawString(prefix)
		out.String(string(in.Cons))
	}
	if in.Comment != "" {
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentDB) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeServDomainModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentDB) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeServDomainModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentDB) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeServDomainModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentDB) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeServDomainModel5(l, v)
}
func easyjsonC80ae7adDecodeServDomainModel6(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userid":
			out.UserID = int(in.Int())
		case "username":
			out.Username = string(in.String())
		case "pros":
			out.Pros = string(in.String())
		case "cons":
			out.Cons = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "rating":
			out.Rating = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeServDomainModel6(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.Pros != "" {
		const prefix string = ",\"pros\":"
		out.RawString(prefix)
		out.String(string(in.Pros))
	}
	if in.Cons != "" {
		const prefix string = ",\"cons\":"
		out.RawString(prefix)
		out.String(string(in.Cons))
	}
	if in.Comment != "" {
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeServDomainModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeServDomainModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeServDomainModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeServDomainModel6(l, v)
}
