// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA532a84DecodeServDomainModel(in *jlexer.Lexer, out *Search) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "search":
			out.Search = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel(out *jwriter.Writer, in Search) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"search\":"
		out.RawString(prefix[1:])
		out.String(string(in.Search))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Search) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA532a84EncodeServDomainModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Search) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA532a84EncodeServDomainModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Search) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA532a84DecodeServDomainModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Search) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA532a84DecodeServDomainModel(l, v)
}
func easyjsonA532a84DecodeServDomainModel1(in *jlexer.Lexer, out *ProductCartItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "itemid":
			out.ItemID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel1(out *jwriter.Writer, in ProductCartItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"itemid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ItemID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductCartItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA532a84EncodeServDomainModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductCartItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA532a84EncodeServDomainModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductCartItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA532a84DecodeServDomainModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductCartItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA532a84DecodeServDomainModel1(l, v)
}
func easyjsonA532a84DecodeServDomainModel2(in *jlexer.Lexer, out *ProductCart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]int, 0, 8)
					} else {
						out.Items = []int{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int
					v1 = int(in.Int())
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel2(out *jwriter.Writer, in ProductCart) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductCart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA532a84EncodeServDomainModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductCart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA532a84EncodeServDomainModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductCart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA532a84DecodeServDomainModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductCart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA532a84DecodeServDomainModel2(l, v)
}
func easyjsonA532a84DecodeServDomainModel3(in *jlexer.Lexer, out *Product) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "lowprice":
			out.Price = float64(in.Float64())
		case "price":
			out.NominalPrice = float64(in.Float64())
		case "rating":
			out.Rating = float64(in.Float64())
		case "imgsrc":
			if in.IsNull() {
				in.Skip()
				out.Imgsrc = nil
			} else {
				if out.Imgsrc == nil {
					out.Imgsrc = new(string)
				}
				*out.Imgsrc = string(in.String())
			}
		case "commentscount":
			if in.IsNull() {
				in.Skip()
				out.CommentsCount = nil
			} else {
				if out.CommentsCount == nil {
					out.CommentsCount = new(int)
				}
				*out.CommentsCount = int(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel3(out *jwriter.Writer, in Product) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	if in.Price != 0 {
		const prefix string = ",\"lowprice\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.NominalPrice))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float64(float64(in.Rating))
	}
	if in.Imgsrc != nil {
		const prefix string = ",\"imgsrc\":"
		out.RawString(prefix)
		out.String(string(*in.Imgsrc))
	}
	if in.CommentsCount != nil {
		const prefix string = ",\"commentscount\":"
		out.RawString(prefix)
		out.Int(int(*in.CommentsCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Product) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA532a84EncodeServDomainModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Product) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA532a84EncodeServDomainModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Product) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA532a84DecodeServDomainModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Product) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA532a84DecodeServDomainModel3(l, v)
}
func easyjsonA532a84DecodeServDomainModel4(in *jlexer.Lexer, out *OrderModelGetOrders) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "userid":
			out.UserID = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*CartProduct, 0, 8)
					} else {
						out.Items = []*CartProduct{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *CartProduct
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(CartProduct)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "orderstatus":
			out.OrderStatus = string(in.String())
		case "paymentstatus":
			out.PaymentStatus = string(in.String())
		case "address":
			easyjsonA532a84DecodeServDomainModel5(in, &out.Address)
		case "card":
			easyjsonA532a84DecodeServDomainModel6(in, &out.Paymentcard)
		case "creationDate":
			if in.IsNull() {
				in.Skip()
				out.CreationDate = nil
			} else {
				if out.CreationDate == nil {
					out.CreationDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreationDate).UnmarshalJSON(data))
				}
			}
		case "deliveryDate":
			if in.IsNull() {
				in.Skip()
				out.DeliveryDate = nil
			} else {
				if out.DeliveryDate == nil {
					out.DeliveryDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeliveryDate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel4(out *jwriter.Writer, in OrderModelGetOrders) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Items {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"orderstatus\":"
		out.RawString(prefix)
		out.String(string(in.OrderStatus))
	}
	{
		const prefix string = ",\"paymentstatus\":"
		out.RawString(prefix)
		out.String(string(in.PaymentStatus))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		easyjsonA532a84EncodeServDomainModel5(out, in.Address)
	}
	{
		const prefix string = ",\"card\":"
		out.RawString(prefix)
		easyjsonA532a84EncodeServDomainModel6(out, in.Paymentcard)
	}
	{
		const prefix string = ",\"creationDate\":"
		out.RawString(prefix)
		if in.CreationDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreationDate).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"deliveryDate\":"
		out.RawString(prefix)
		if in.DeliveryDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeliveryDate).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderModelGetOrders) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA532a84EncodeServDomainModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderModelGetOrders) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA532a84EncodeServDomainModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderModelGetOrders) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA532a84DecodeServDomainModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderModelGetOrders) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA532a84DecodeServDomainModel4(l, v)
}
func easyjsonA532a84DecodeServDomainModel6(in *jlexer.Lexer, out *PaymentMethod) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "type":
			out.PaymentType = string(in.String())
		case "number":
			out.Number = string(in.String())
		case "expirydate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ExpiryDate).UnmarshalJSON(data))
			}
		case "priority":
			out.Priority = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel6(out *jwriter.Writer, in PaymentMethod) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.PaymentType))
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"expirydate\":"
		out.RawString(prefix)
		out.Raw((in.ExpiryDate).MarshalJSON())
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Bool(bool(in.Priority))
	}
	out.RawByte('}')
}
func easyjsonA532a84DecodeServDomainModel5(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "city":
			out.City = string(in.String())
		case "street":
			out.Street = string(in.String())
		case "house":
			out.House = string(in.String())
		case "flat":
			out.Flat = string(in.String())
		case "priority":
			out.Priority = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel5(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"street\":"
		out.RawString(prefix)
		out.String(string(in.Street))
	}
	{
		const prefix string = ",\"house\":"
		out.RawString(prefix)
		out.String(string(in.House))
	}
	{
		const prefix string = ",\"flat\":"
		out.RawString(prefix)
		out.String(string(in.Flat))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Bool(bool(in.Priority))
	}
	out.RawByte('}')
}
func easyjsonA532a84DecodeServDomainModel7(in *jlexer.Lexer, out *OrderItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				if out.Item == nil {
					out.Item = new(Product)
				}
				(*out.Item).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel7(out *jwriter.Writer, in OrderItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"item\":"
		out.RawString(prefix)
		if in.Item == nil {
			out.RawString("null")
		} else {
			(*in.Item).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA532a84EncodeServDomainModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA532a84EncodeServDomainModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA532a84DecodeServDomainModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA532a84DecodeServDomainModel7(l, v)
}
func easyjsonA532a84DecodeServDomainModel8(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "userid":
			out.UserID = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*OrderItem, 0, 8)
					} else {
						out.Items = []*OrderItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *OrderItem
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(OrderItem)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "orderstatus":
			out.OrderStatus = string(in.String())
		case "paymentstatus":
			out.PaymentStatus = string(in.String())
		case "address":
			out.AddressID = int(in.Int())
		case "card":
			out.PaymentcardID = int(in.Int())
		case "creationDate":
			if in.IsNull() {
				in.Skip()
				out.CreationDate = nil
			} else {
				if out.CreationDate == nil {
					out.CreationDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreationDate).UnmarshalJSON(data))
				}
			}
		case "deliveryDate":
			if in.IsNull() {
				in.Skip()
				out.DeliveryDate = nil
			} else {
				if out.DeliveryDate == nil {
					out.DeliveryDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeliveryDate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel8(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Items {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"orderstatus\":"
		out.RawString(prefix)
		out.String(string(in.OrderStatus))
	}
	{
		const prefix string = ",\"paymentstatus\":"
		out.RawString(prefix)
		out.String(string(in.PaymentStatus))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.Int(int(in.AddressID))
	}
	{
		const prefix string = ",\"card\":"
		out.RawString(prefix)
		out.Int(int(in.PaymentcardID))
	}
	{
		const prefix string = ",\"creationDate\":"
		out.RawString(prefix)
		if in.CreationDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CreationDate).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"deliveryDate\":"
		out.RawString(prefix)
		if in.DeliveryDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeliveryDate).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Order) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA532a84EncodeServDomainModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Order) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA532a84EncodeServDomainModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Order) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA532a84DecodeServDomainModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Order) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA532a84DecodeServDomainModel8(l, v)
}
func easyjsonA532a84DecodeServDomainModel9(in *jlexer.Lexer, out *MakeOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userid":
			out.UserID = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]int, 0, 8)
					} else {
						out.Items = []int{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v10 int
					v10 = int(in.Int())
					out.Items = append(out.Items, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "address":
			out.AddressID = int(in.Int())
		case "card":
			out.PaymentcardID = int(in.Int())
		case "deliveryDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DeliveryDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel9(out *jwriter.Writer, in MakeOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Items {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.Int(int(in.AddressID))
	}
	{
		const prefix string = ",\"card\":"
		out.RawString(prefix)
		out.Int(int(in.PaymentcardID))
	}
	{
		const prefix string = ",\"deliveryDate\":"
		out.RawString(prefix)
		out.Raw((in.DeliveryDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MakeOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA532a84EncodeServDomainModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MakeOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA532a84EncodeServDomainModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MakeOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA532a84DecodeServDomainModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MakeOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA532a84DecodeServDomainModel9(l, v)
}
func easyjsonA532a84DecodeServDomainModel10(in *jlexer.Lexer, out *CartProduct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "count":
			out.Count = int(in.Int())
		case "lowprice":
			out.Price = float64(in.Float64())
		case "price":
			out.NominalPrice = float64(in.Float64())
		case "imgsrc":
			if in.IsNull() {
				in.Skip()
				out.Imgsrc = nil
			} else {
				if out.Imgsrc == nil {
					out.Imgsrc = new(string)
				}
				*out.Imgsrc = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel10(out *jwriter.Writer, in CartProduct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	if in.Price != 0 {
		const prefix string = ",\"lowprice\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.NominalPrice))
	}
	if in.Imgsrc != nil {
		const prefix string = ",\"imgsrc\":"
		out.RawString(prefix)
		out.String(string(*in.Imgsrc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartProduct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA532a84EncodeServDomainModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartProduct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA532a84EncodeServDomainModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartProduct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA532a84DecodeServDomainModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartProduct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA532a84DecodeServDomainModel10(l, v)
}
func easyjsonA532a84DecodeServDomainModel11(in *jlexer.Lexer, out *Cart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "userid":
			out.UserID = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*CartProduct, 0, 8)
					} else {
						out.Items = []*CartProduct{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *CartProduct
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(CartProduct)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA532a84EncodeServDomainModel11(out *jwriter.Writer, in Cart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"userid\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Items {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA532a84EncodeServDomainModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA532a84EncodeServDomainModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA532a84DecodeServDomainModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA532a84DecodeServDomainModel11(l, v)
}
