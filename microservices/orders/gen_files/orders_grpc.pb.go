// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: microservices/orders/gen_files/orders.proto

package orders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdersWorkerClient is the client API for OrdersWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersWorkerClient interface {
	MakeOrder(ctx context.Context, in *MakeOrderType, opts ...grpc.CallOption) (*Nothing, error)
	GetOrders(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*OrdersResponse, error)
	ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusType, opts ...grpc.CallOption) (*Nothing, error)
}

type ordersWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersWorkerClient(cc grpc.ClientConnInterface) OrdersWorkerClient {
	return &ordersWorkerClient{cc}
}

func (c *ordersWorkerClient) MakeOrder(ctx context.Context, in *MakeOrderType, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/orders.OrdersWorker/MakeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersWorkerClient) GetOrders(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/orders.OrdersWorker/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersWorkerClient) ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusType, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/orders.OrdersWorker/ChangeOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersWorkerServer is the server API for OrdersWorker service.
// All implementations must embed UnimplementedOrdersWorkerServer
// for forward compatibility
type OrdersWorkerServer interface {
	MakeOrder(context.Context, *MakeOrderType) (*Nothing, error)
	GetOrders(context.Context, *UserID) (*OrdersResponse, error)
	ChangeOrderStatus(context.Context, *ChangeOrderStatusType) (*Nothing, error)
	mustEmbedUnimplementedOrdersWorkerServer()
}

// UnimplementedOrdersWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersWorkerServer struct {
}

func (UnimplementedOrdersWorkerServer) MakeOrder(context.Context, *MakeOrderType) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeOrder not implemented")
}
func (UnimplementedOrdersWorkerServer) GetOrders(context.Context, *UserID) (*OrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedOrdersWorkerServer) ChangeOrderStatus(context.Context, *ChangeOrderStatusType) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrderStatus not implemented")
}
func (UnimplementedOrdersWorkerServer) mustEmbedUnimplementedOrdersWorkerServer() {}

// UnsafeOrdersWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersWorkerServer will
// result in compilation errors.
type UnsafeOrdersWorkerServer interface {
	mustEmbedUnimplementedOrdersWorkerServer()
}

func RegisterOrdersWorkerServer(s grpc.ServiceRegistrar, srv OrdersWorkerServer) {
	s.RegisterService(&OrdersWorker_ServiceDesc, srv)
}

func _OrdersWorker_MakeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeOrderType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersWorkerServer).MakeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.OrdersWorker/MakeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersWorkerServer).MakeOrder(ctx, req.(*MakeOrderType))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersWorker_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersWorkerServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.OrdersWorker/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersWorkerServer).GetOrders(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdersWorker_ChangeOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeOrderStatusType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersWorkerServer).ChangeOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.OrdersWorker/ChangeOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersWorkerServer).ChangeOrderStatus(ctx, req.(*ChangeOrderStatusType))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdersWorker_ServiceDesc is the grpc.ServiceDesc for OrdersWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdersWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orders.OrdersWorker",
	HandlerType: (*OrdersWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeOrder",
			Handler:    _OrdersWorker_MakeOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _OrdersWorker_GetOrders_Handler,
		},
		{
			MethodName: "ChangeOrderStatus",
			Handler:    _OrdersWorker_ChangeOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservices/orders/gen_files/orders.proto",
}
