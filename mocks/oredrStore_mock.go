// Code generated by MockGen. DO NOT EDIT.
// Source: ordersStore.go

// Package mock_orders is a generated GoMock package.
package mocks

import (
        reflect "reflect"
        model "serv/domain/model"
        orders "serv/microservices/orders/gen_files"

        gomock "github.com/golang/mock/gomock"
)

// MockOrderStoreInterface is a mock of OrderStoreInterface interface.
type MockOrderStoreInterface struct {
        ctrl     *gomock.Controller
        recorder *MockOrderStoreInterfaceMockRecorder
}

// MockOrderStoreInterfaceMockRecorder is the mock recorder for MockOrderStoreInterface.
type MockOrderStoreInterfaceMockRecorder struct {
        mock *MockOrderStoreInterface
}

// NewMockOrderStoreInterface creates a new mock instance.
func NewMockOrderStoreInterface(ctrl *gomock.Controller) *MockOrderStoreInterface {
        mock := &MockOrderStoreInterface{ctrl: ctrl}
        mock.recorder = &MockOrderStoreInterfaceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStoreInterface) EXPECT() *MockOrderStoreInterfaceMockRecorder {
        return m.recorder
}

// ChangeOrderStatus mocks base method.
func (m *MockOrderStoreInterface) ChangeOrderStatus(in *orders.ChangeOrderStatusType) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ChangeOrderStatus", in)
        ret0, _ := ret[0].(error)
        return ret0
}

// ChangeOrderStatus indicates an expected call of ChangeOrderStatus.
func (mr *MockOrderStoreInterfaceMockRecorder) ChangeOrderStatus(in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderStatus", reflect.TypeOf((*MockOrderStoreInterface)(nil).ChangeOrderStatus), in)
}

// GetOrderItemsFromStore mocks base method.
func (m *MockOrderStoreInterface) GetOrderItemsFromStore(orderID int) ([]*model.OrderItem, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrderItemsFromStore", orderID)
        ret0, _ := ret[0].([]*model.OrderItem)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrderItemsFromStore indicates an expected call of GetOrderItemsFromStore.
func (mr *MockOrderStoreInterfaceMockRecorder) GetOrderItemsFromStore(orderID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsFromStore", reflect.TypeOf((*MockOrderStoreInterface)(nil).GetOrderItemsFromStore), orderID)
}

// GetOrdersAddressFromStore mocks base method.
func (m *MockOrderStoreInterface) GetOrdersAddressFromStore(addressID int) (*model.Address, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrdersAddressFromStore", addressID)
        ret0, _ := ret[0].(*model.Address)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrdersAddressFromStore indicates an expected call of GetOrdersAddressFromStore.
func (mr *MockOrderStoreInterfaceMockRecorder) GetOrdersAddressFromStore(addressID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersAddressFromStore", reflect.TypeOf((*MockOrderStoreInterface)(nil).GetOrdersAddressFromStore), addressID)
}

// GetOrdersFromStore mocks base method.
func (m *MockOrderStoreInterface) GetOrdersFromStore(userID int) ([]*model.Order, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrdersFromStore", userID)
        ret0, _ := ret[0].([]*model.Order)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrdersFromStore indicates an expected call of GetOrdersFromStore.
func (mr *MockOrderStoreInterfaceMockRecorder) GetOrdersFromStore(userID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersFromStore", reflect.TypeOf((*MockOrderStoreInterface)(nil).GetOrdersFromStore), userID)
}

// GetOrdersPaymentFromStore mocks base method.
func (m *MockOrderStoreInterface) GetOrdersPaymentFromStore(paymentID int) (*model.PaymentMethod, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrdersPaymentFromStore", paymentID)
        ret0, _ := ret[0].(*model.PaymentMethod)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrdersPaymentFromStore indicates an expected call of GetOrdersPaymentFromStore.
func (mr *MockOrderStoreInterfaceMockRecorder) GetOrdersPaymentFromStore(paymentID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersPaymentFromStore", reflect.TypeOf((*MockOrderStoreInterface)(nil).GetOrdersPaymentFromStore), paymentID)
}

// MakeOrder mocks base method.
func (m *MockOrderStoreInterface) MakeOrder(in *orders.MakeOrderType) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "MakeOrder", in)
        ret0, _ := ret[0].(error)
        return ret0
}

// MakeOrder indicates an expected call of MakeOrder.
func (mr *MockOrderStoreInterfaceMockRecorder) MakeOrder(in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrder", reflect.TypeOf((*MockOrderStoreInterface)(nil).MakeOrder), in)
}