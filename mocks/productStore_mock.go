// Code generated by MockGen. DO NOT EDIT.
// Source: productStore.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
        reflect "reflect"
        model "serv/domain/model"

        gomock "github.com/golang/mock/gomock"
)

// MockProductStoreInterface is a mock of ProductStoreInterface interface.
type MockProductStoreInterface struct {
        ctrl     *gomock.Controller
        recorder *MockProductStoreInterfaceMockRecorder
}

// MockProductStoreInterfaceMockRecorder is the mock recorder for MockProductStoreInterface.
type MockProductStoreInterfaceMockRecorder struct {
        mock *MockProductStoreInterface
}

// NewMockProductStoreInterface creates a new mock instance.
func NewMockProductStoreInterface(ctrl *gomock.Controller) *MockProductStoreInterface {
        mock := &MockProductStoreInterface{ctrl: ctrl}
        mock.recorder = &MockProductStoreInterfaceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductStoreInterface) EXPECT() *MockProductStoreInterfaceMockRecorder {
        return m.recorder
}

// CheckPromocodeUsage mocks base method.
func (m *MockProductStoreInterface) CheckPromocodeUsage(userID int, promocode string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CheckPromocodeUsage", userID, promocode)
        ret0, _ := ret[0].(error)
        return ret0
}

// CheckPromocodeUsage indicates an expected call of CheckPromocodeUsage.
func (mr *MockProductStoreInterfaceMockRecorder) CheckPromocodeUsage(userID, promocode interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPromocodeUsage", reflect.TypeOf((*MockProductStoreInterface)(nil).CheckPromocodeUsage), userID, promocode)
}

// CreateCart mocks base method.
func (m *MockProductStoreInterface) CreateCart(userID int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateCart", userID)
        ret0, _ := ret[0].(error)
        return ret0
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockProductStoreInterfaceMockRecorder) CreateCart(userID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockProductStoreInterface)(nil).CreateCart), userID)
}

// CreateCommentInStore mocks base method.
func (m *MockProductStoreInterface) CreateCommentInStore(in *model.CreateComment) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateCommentInStore", in)
        ret0, _ := ret[0].(error)
        return ret0
}

// CreateCommentInStore indicates an expected call of CreateCommentInStore.
func (mr *MockProductStoreInterfaceMockRecorder) CreateCommentInStore(in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentInStore", reflect.TypeOf((*MockProductStoreInterface)(nil).CreateCommentInStore), in)
}

// DeleteItemFromCartById mocks base method.
func (m *MockProductStoreInterface) DeleteItemFromCartById(userID, itemID int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteItemFromCartById", userID, itemID)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteItemFromCartById indicates an expected call of DeleteItemFromCartById.
func (mr *MockProductStoreInterfaceMockRecorder) DeleteItemFromCartById(userID, itemID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemFromCartById", reflect.TypeOf((*MockProductStoreInterface)(nil).DeleteItemFromCartById), userID, itemID)
}

// DeleteItemFromFavoritesDB mocks base method.
func (m *MockProductStoreInterface) DeleteItemFromFavoritesDB(userID, itemID int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteItemFromFavoritesDB", userID, itemID)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteItemFromFavoritesDB indicates an expected call of DeleteItemFromFavoritesDB.
func (mr *MockProductStoreInterfaceMockRecorder) DeleteItemFromFavoritesDB(userID, itemID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemFromFavoritesDB", reflect.TypeOf((*MockProductStoreInterface)(nil).DeleteItemFromFavoritesDB), userID, itemID)
}

// GetCart mocks base method.
func (m *MockProductStoreInterface) GetCart(userID int) (*model.Order, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetCart", userID)
        ret0, _ := ret[0].(*model.Order)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockProductStoreInterfaceMockRecorder) GetCart(userID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockProductStoreInterface)(nil).GetCart), userID)
}

// GetCommentsFromStore mocks base method.
func (m *MockProductStoreInterface) GetCommentsFromStore(productID int) ([]*model.CommentDB, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetCommentsFromStore", productID)
        ret0, _ := ret[0].([]*model.CommentDB)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetCommentsFromStore indicates an expected call of GetCommentsFromStore.
func (mr *MockProductStoreInterfaceMockRecorder) GetCommentsFromStore(productID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsFromStore", reflect.TypeOf((*MockProductStoreInterface)(nil).GetCommentsFromStore), productID)
}

// GetFavoritesDB mocks base method.
func (m *MockProductStoreInterface) GetFavoritesDB(userID, lastitemid, count int, sort string) ([]*model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetFavoritesDB", userID, lastitemid, count, sort)
        ret0, _ := ret[0].([]*model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetFavoritesDB indicates an expected call of GetFavoritesDB.
func (mr *MockProductStoreInterfaceMockRecorder) GetFavoritesDB(userID, lastitemid, count, sort interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoritesDB", reflect.TypeOf((*MockProductStoreInterface)(nil).GetFavoritesDB), userID, lastitemid, count, sort)
}

// GetOrderItemsFromStore mocks base method.
func (m *MockProductStoreInterface) GetOrderItemsFromStore(orderID int) ([]*model.OrderItem, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrderItemsFromStore", orderID)
        ret0, _ := ret[0].([]*model.OrderItem)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrderItemsFromStore indicates an expected call of GetOrderItemsFromStore.
func (mr *MockProductStoreInterfaceMockRecorder) GetOrderItemsFromStore(orderID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsFromStore", reflect.TypeOf((*MockProductStoreInterface)(nil).GetOrderItemsFromStore), orderID)
}

// GetProductFromStoreByID mocks base method.
func (m *MockProductStoreInterface) GetProductFromStoreByID(itemsID int) (*model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetProductFromStoreByID", itemsID)
        ret0, _ := ret[0].(*model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetProductFromStoreByID indicates an expected call of GetProductFromStoreByID.
func (mr *MockProductStoreInterfaceMockRecorder) GetProductFromStoreByID(itemsID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductFromStoreByID", reflect.TypeOf((*MockProductStoreInterface)(nil).GetProductFromStoreByID), itemsID)
}

// GetProductPropertiesFromStore mocks base method.
func (m *MockProductStoreInterface) GetProductPropertiesFromStore(itemID int, itemCategory string) ([]*model.Property, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetProductPropertiesFromStore", itemID, itemCategory)
        ret0, _ := ret[0].([]*model.Property)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetProductPropertiesFromStore indicates an expected call of GetProductPropertiesFromStore.
func (mr *MockProductStoreInterfaceMockRecorder) GetProductPropertiesFromStore(itemID, itemCategory interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductPropertiesFromStore", reflect.TypeOf((*MockProductStoreInterface)(nil).GetProductPropertiesFromStore), itemID, itemCategory)
}

// GetProductsBySearchFromStore mocks base method.
func (m *MockProductStoreInterface) GetProductsBySearchFromStore(search string) ([]*model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetProductsBySearchFromStore", search)
        ret0, _ := ret[0].([]*model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetProductsBySearchFromStore indicates an expected call of GetProductsBySearchFromStore.
func (mr *MockProductStoreInterfaceMockRecorder) GetProductsBySearchFromStore(search interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsBySearchFromStore", reflect.TypeOf((*MockProductStoreInterface)(nil).GetProductsBySearchFromStore), search)
}

// GetProductsFromStore mocks base method.
func (m *MockProductStoreInterface) GetProductsFromStore(lastitemid, count int, sort string) ([]*model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetProductsFromStore", lastitemid, count, sort)
        ret0, _ := ret[0].([]*model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetProductsFromStore indicates an expected call of GetProductsFromStore.
func (mr *MockProductStoreInterfaceMockRecorder) GetProductsFromStore(lastitemid, count, sort interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsFromStore", reflect.TypeOf((*MockProductStoreInterface)(nil).GetProductsFromStore), lastitemid, count, sort)
}

// GetProductsRatingAndCommsCountFromStore mocks base method.
func (m *MockProductStoreInterface) GetProductsRatingAndCommsCountFromStore(itemsID int) (float64, int, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetProductsRatingAndCommsCountFromStore", itemsID)
        ret0, _ := ret[0].(float64)
        ret1, _ := ret[1].(int)
        ret2, _ := ret[2].(error)
        return ret0, ret1, ret2
}

// GetProductsRatingAndCommsCountFromStore indicates an expected call of GetProductsRatingAndCommsCountFromStore.
func (mr *MockProductStoreInterfaceMockRecorder) GetProductsRatingAndCommsCountFromStore(itemsID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsRatingAndCommsCountFromStore", reflect.TypeOf((*MockProductStoreInterface)(nil).GetProductsRatingAndCommsCountFromStore), itemsID)
}

// GetProductsWithBiggestDiscountFromStore mocks base method.
func (m *MockProductStoreInterface) GetProductsWithBiggestDiscountFromStore(lastitemid, count int) ([]*model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetProductsWithBiggestDiscountFromStore", lastitemid, count)
        ret0, _ := ret[0].([]*model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetProductsWithBiggestDiscountFromStore indicates an expected call of GetProductsWithBiggestDiscountFromStore.
func (mr *MockProductStoreInterfaceMockRecorder) GetProductsWithBiggestDiscountFromStore(lastitemid, count interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsWithBiggestDiscountFromStore", reflect.TypeOf((*MockProductStoreInterface)(nil).GetProductsWithBiggestDiscountFromStore), lastitemid, count)
}

// GetProductsWithCategoryFromStore mocks base method.
func (m *MockProductStoreInterface) GetProductsWithCategoryFromStore(category string, lastitemid, count int, sort string) ([]*model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetProductsWithCategoryFromStore", category, lastitemid, count, sort)
        ret0, _ := ret[0].([]*model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetProductsWithCategoryFromStore indicates an expected call of GetProductsWithCategoryFromStore.
func (mr *MockProductStoreInterfaceMockRecorder) GetProductsWithCategoryFromStore(category, lastitemid, count, sort interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsWithCategoryFromStore", reflect.TypeOf((*MockProductStoreInterface)(nil).GetProductsWithCategoryFromStore), category, lastitemid, count, sort)
}

// GetRecommendationProductsFromStore mocks base method.
func (m *MockProductStoreInterface) GetRecommendationProductsFromStore(itemID int) ([]*model.Product, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetRecommendationProductsFromStore", itemID)
        ret0, _ := ret[0].([]*model.Product)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetRecommendationProductsFromStore indicates an expected call of GetRecommendationProductsFromStore.
func (mr *MockProductStoreInterfaceMockRecorder) GetRecommendationProductsFromStore(itemID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendationProductsFromStore", reflect.TypeOf((*MockProductStoreInterface)(nil).GetRecommendationProductsFromStore), itemID)
}

// GetSuggestionsFromStore mocks base method.
func (m *MockProductStoreInterface) GetSuggestionsFromStore(search string) ([]string, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetSuggestionsFromStore", search)
        ret0, _ := ret[0].([]string)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetSuggestionsFromStore indicates an expected call of GetSuggestionsFromStore.
func (mr *MockProductStoreInterfaceMockRecorder) GetSuggestionsFromStore(search interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestionsFromStore", reflect.TypeOf((*MockProductStoreInterface)(nil).GetSuggestionsFromStore), search)
}

// InsertItemIntoCartById mocks base method.
func (m *MockProductStoreInterface) InsertItemIntoCartById(userID, itemID int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "InsertItemIntoCartById", userID, itemID)
        ret0, _ := ret[0].(error)
        return ret0
}

// InsertItemIntoCartById indicates an expected call of InsertItemIntoCartById.
func (mr *MockProductStoreInterfaceMockRecorder) InsertItemIntoCartById(userID, itemID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertItemIntoCartById", reflect.TypeOf((*MockProductStoreInterface)(nil).InsertItemIntoCartById), userID, itemID)
}

// InsertItemIntoFavoritesDB mocks base method.
func (m *MockProductStoreInterface) InsertItemIntoFavoritesDB(userID, itemID int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "InsertItemIntoFavoritesDB", userID, itemID)
        ret0, _ := ret[0].(error)
        return ret0
}

// InsertItemIntoFavoritesDB indicates an expected call of InsertItemIntoFavoritesDB.
func (mr *MockProductStoreInterfaceMockRecorder) InsertItemIntoFavoritesDB(userID, itemID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertItemIntoFavoritesDB", reflect.TypeOf((*MockProductStoreInterface)(nil).InsertItemIntoFavoritesDB), userID, itemID)
}

// SetPromocodeDB mocks base method.
func (m *MockProductStoreInterface) SetPromocodeDB(userID int, promocode string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "SetPromocodeDB", userID, promocode)
        ret0, _ := ret[0].(error)
        return ret0
}

// SetPromocodeDB indicates an expected call of SetPromocodeDB.
func (mr *MockProductStoreInterfaceMockRecorder) SetPromocodeDB(userID, promocode interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPromocodeDB", reflect.TypeOf((*MockProductStoreInterface)(nil).SetPromocodeDB), userID, promocode)
}

// UpdateCart mocks base method.
func (m *MockProductStoreInterface) UpdateCart(userID int, items *[]int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateCart", userID, items)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockProductStoreInterfaceMockRecorder) UpdateCart(userID, items interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockProductStoreInterface)(nil).UpdateCart), userID, items)
}

// UpdatePricesOrderItemsInStore mocks base method.
func (m *MockProductStoreInterface) UpdatePricesOrderItemsInStore(userID int, category string, discount int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdatePricesOrderItemsInStore", userID, category, discount)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdatePricesOrderItemsInStore indicates an expected call of UpdatePricesOrderItemsInStore.
func (mr *MockProductStoreInterfaceMockRecorder) UpdatePricesOrderItemsInStore(userID, category, discount interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePricesOrderItemsInStore", reflect.TypeOf((*MockProductStoreInterface)(nil).UpdatePricesOrderItemsInStore), userID, category, discount)
}

// UpdateProductRatingInStore mocks base method.
func (m *MockProductStoreInterface) UpdateProductRatingInStore(itemID int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateProductRatingInStore", itemID)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateProductRatingInStore indicates an expected call of UpdateProductRatingInStore.
func (mr *MockProductStoreInterfaceMockRecorder) UpdateProductRatingInStore(itemID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductRatingInStore", reflect.TypeOf((*MockProductStoreInterface)(nil).UpdateProductRatingInStore), itemID)
}