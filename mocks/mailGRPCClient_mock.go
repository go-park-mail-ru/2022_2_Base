// Code generated by MockGen. DO NOT EDIT.
// Source: mail_grpc.pb.go

// Package mock_mail is a generated GoMock package.
package mocks

import (
        context "context"
        reflect "reflect"
        mail "serv/microservices/mail/gen_files"

        gomock "github.com/golang/mock/gomock"
        grpc "google.golang.org/grpc"
)

// MockMailServiceClient is a mock of MailServiceClient interface.
type MockMailServiceClient struct {
        ctrl     *gomock.Controller
        recorder *MockMailServiceClientMockRecorder
}

// MockMailServiceClientMockRecorder is the mock recorder for MockMailServiceClient.
type MockMailServiceClientMockRecorder struct {
        mock *MockMailServiceClient
}

// NewMockMailServiceClient creates a new mock instance.
func NewMockMailServiceClient(ctrl *gomock.Controller) *MockMailServiceClient {
        mock := &MockMailServiceClient{ctrl: ctrl}
        mock.recorder = &MockMailServiceClientMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailServiceClient) EXPECT() *MockMailServiceClientMockRecorder {
        return m.recorder
}

// SendMail mocks base method.
func (m *MockMailServiceClient) SendMail(ctx context.Context, in *mail.Mail, opts ...grpc.CallOption) (*mail.Nothing, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{ctx, in}
        for _, a := range opts {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "SendMail", varargs...)
        ret0, _ := ret[0].(*mail.Nothing)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// SendMail indicates an expected call of SendMail.
func (mr *MockMailServiceClientMockRecorder) SendMail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{ctx, in}, opts...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockMailServiceClient)(nil).SendMail), varargs...)
}

// MockMailServiceServer is a mock of MailServiceServer interface.
type MockMailServiceServer struct {
        ctrl     *gomock.Controller
        recorder *MockMailServiceServerMockRecorder
}

// MockMailServiceServerMockRecorder is the mock recorder for MockMailServiceServer.
type MockMailServiceServerMockRecorder struct {
        mock *MockMailServiceServer
}

// NewMockMailServiceServer creates a new mock instance.
func NewMockMailServiceServer(ctrl *gomock.Controller) *MockMailServiceServer {
        mock := &MockMailServiceServer{ctrl: ctrl}
        mock.recorder = &MockMailServiceServerMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailServiceServer) EXPECT() *MockMailServiceServerMockRecorder {
        return m.recorder
}

// SendMail mocks base method.
func (m *MockMailServiceServer) SendMail(arg0 context.Context, arg1 *mail.Mail) (*mail.Nothing, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "SendMail", arg0, arg1)
        ret0, _ := ret[0].(*mail.Nothing)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// SendMail indicates an expected call of SendMail.
func (mr *MockMailServiceServerMockRecorder) SendMail(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockMailServiceServer)(nil).SendMail), arg0, arg1)
}

// mustEmbedUnimplementedMailServiceServer mocks base method.
func (m *MockMailServiceServer) mustEmbedUnimplementedMailServiceServer() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "mustEmbedUnimplementedMailServiceServer")
}

// mustEmbedUnimplementedMailServiceServer indicates an expected call of mustEmbedUnimplementedMailServiceServer.
func (mr *MockMailServiceServerMockRecorder) mustEmbedUnimplementedMailServiceServer() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMailServiceServer", reflect.TypeOf((*MockMailServiceServer)(nil).mustEmbedUnimplementedMailServiceServer))
}

// MockUnsafeMailServiceServer is a mock of UnsafeMailServiceServer interface.
type MockUnsafeMailServiceServer struct {
        ctrl     *gomock.Controller
        recorder *MockUnsafeMailServiceServerMockRecorder
}

// MockUnsafeMailServiceServerMockRecorder is the mock recorder for MockUnsafeMailServiceServer.
type MockUnsafeMailServiceServerMockRecorder struct {
        mock *MockUnsafeMailServiceServer
}

// NewMockUnsafeMailServiceServer creates a new mock instance.
func NewMockUnsafeMailServiceServer(ctrl *gomock.Controller) *MockUnsafeMailServiceServer {
        mock := &MockUnsafeMailServiceServer{ctrl: ctrl}
        mock.recorder = &MockUnsafeMailServiceServerMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMailServiceServer) EXPECT() *MockUnsafeMailServiceServerMockRecorder {
        return m.recorder
}

// mustEmbedUnimplementedMailServiceServer mocks base method.
func (m *MockUnsafeMailServiceServer) mustEmbedUnimplementedMailServiceServer() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "mustEmbedUnimplementedMailServiceServer")
}

// mustEmbedUnimplementedMailServiceServer indicates an expected call of mustEmbedUnimplementedMailServiceServer.
func (mr *MockUnsafeMailServiceServerMockRecorder) mustEmbedUnimplementedMailServiceServer() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMailServiceServer", reflect.TypeOf((*MockUnsafeMailServiceServer)(nil).mustEmbedUnimplementedMailServiceServer))
}