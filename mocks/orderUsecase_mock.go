// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_orders is a generated GoMock package.
package mocks

import (
        context "context"
        reflect "reflect"
        model "serv/domain/model"
        orders "serv/microservices/orders/gen_files"

        gomock "github.com/golang/mock/gomock"
)

// MockOrderUsecaseInterface is a mock of OrderUsecaseInterface interface.
type MockOrderUsecaseInterface struct {
        ctrl     *gomock.Controller
        recorder *MockOrderUsecaseInterfaceMockRecorder
}

// MockOrderUsecaseInterfaceMockRecorder is the mock recorder for MockOrderUsecaseInterface.
type MockOrderUsecaseInterfaceMockRecorder struct {
        mock *MockOrderUsecaseInterface
}

// NewMockOrderUsecaseInterface creates a new mock instance.
func NewMockOrderUsecaseInterface(ctrl *gomock.Controller) *MockOrderUsecaseInterface {
        mock := &MockOrderUsecaseInterface{ctrl: ctrl}
        mock.recorder = &MockOrderUsecaseInterfaceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUsecaseInterface) EXPECT() *MockOrderUsecaseInterfaceMockRecorder {
        return m.recorder
}

// ChangeOrderStatus mocks base method.
func (m *MockOrderUsecaseInterface) ChangeOrderStatus(ctx context.Context, in *orders.ChangeOrderStatusType) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ChangeOrderStatus", ctx, in)
        ret0, _ := ret[0].(error)
        return ret0
}

// ChangeOrderStatus indicates an expected call of ChangeOrderStatus.
func (mr *MockOrderUsecaseInterfaceMockRecorder) ChangeOrderStatus(ctx, in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderStatus", reflect.TypeOf((*MockOrderUsecaseInterface)(nil).ChangeOrderStatus), ctx, in)
}

// GetOrders mocks base method.
func (m *MockOrderUsecaseInterface) GetOrders(userID int) ([]*model.Order, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrders", userID)
        ret0, _ := ret[0].([]*model.Order)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderUsecaseInterfaceMockRecorder) GetOrders(userID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderUsecaseInterface)(nil).GetOrders), userID)
}

// GetOrdersAddress mocks base method.
func (m *MockOrderUsecaseInterface) GetOrdersAddress(addressID int) (model.Address, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrdersAddress", addressID)
        ret0, _ := ret[0].(model.Address)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrdersAddress indicates an expected call of GetOrdersAddress.
func (mr *MockOrderUsecaseInterfaceMockRecorder) GetOrdersAddress(addressID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersAddress", reflect.TypeOf((*MockOrderUsecaseInterface)(nil).GetOrdersAddress), addressID)
}

// GetOrdersPayment mocks base method.
func (m *MockOrderUsecaseInterface) GetOrdersPayment(paymentID int) (model.PaymentMethod, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrdersPayment", paymentID)
        ret0, _ := ret[0].(model.PaymentMethod)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrdersPayment indicates an expected call of GetOrdersPayment.
func (mr *MockOrderUsecaseInterfaceMockRecorder) GetOrdersPayment(paymentID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersPayment", reflect.TypeOf((*MockOrderUsecaseInterface)(nil).GetOrdersPayment), paymentID)
}

// MakeOrder mocks base method.
func (m *MockOrderUsecaseInterface) MakeOrder(ctx context.Context, in *orders.MakeOrderType) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "MakeOrder", ctx, in)
        ret0, _ := ret[0].(error)
        return ret0
}

// MakeOrder indicates an expected call of MakeOrder.
func (mr *MockOrderUsecaseInterfaceMockRecorder) MakeOrder(ctx, in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrder", reflect.TypeOf((*MockOrderUsecaseInterface)(nil).MakeOrder), ctx, in)
}