// Code generated by MockGen. DO NOT EDIT.
// Source: userStore.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
        reflect "reflect"
        model "serv/domain/model"

        gomock "github.com/golang/mock/gomock"
)

// MockUserStoreInterface is a mock of UserStoreInterface interface.
type MockUserStoreInterface struct {
        ctrl     *gomock.Controller
        recorder *MockUserStoreInterfaceMockRecorder
}

// MockUserStoreInterfaceMockRecorder is the mock recorder for MockUserStoreInterface.
type MockUserStoreInterfaceMockRecorder struct {
        mock *MockUserStoreInterface
}

// NewMockUserStoreInterface creates a new mock instance.
func NewMockUserStoreInterface(ctrl *gomock.Controller) *MockUserStoreInterface {
        mock := &MockUserStoreInterface{ctrl: ctrl}
        mock.recorder = &MockUserStoreInterfaceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStoreInterface) EXPECT() *MockUserStoreInterfaceMockRecorder {
        return m.recorder
}

// AddUser mocks base method.
func (m *MockUserStoreInterface) AddUser(in *model.UserDB) (int, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "AddUser", in)
        ret0, _ := ret[0].(int)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserStoreInterfaceMockRecorder) AddUser(in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserStoreInterface)(nil).AddUser), in)
}

// AddUsersAddress mocks base method.
func (m *MockUserStoreInterface) AddUsersAddress(userID int, in *model.Address) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "AddUsersAddress", userID, in)
        ret0, _ := ret[0].(error)
        return ret0
}

// AddUsersAddress indicates an expected call of AddUsersAddress.
func (mr *MockUserStoreInterfaceMockRecorder) AddUsersAddress(userID, in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersAddress", reflect.TypeOf((*MockUserStoreInterface)(nil).AddUsersAddress), userID, in)
}

// AddUsersPayment mocks base method.
func (m *MockUserStoreInterface) AddUsersPayment(userID int, in *model.PaymentMethod) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "AddUsersPayment", userID, in)
        ret0, _ := ret[0].(error)
        return ret0
}

// AddUsersPayment indicates an expected call of AddUsersPayment.
func (mr *MockUserStoreInterfaceMockRecorder) AddUsersPayment(userID, in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersPayment", reflect.TypeOf((*MockUserStoreInterface)(nil).AddUsersPayment), userID, in)
}

// ChangeUserPasswordDB mocks base method.
func (m *MockUserStoreInterface) ChangeUserPasswordDB(userID int, newPass string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ChangeUserPasswordDB", userID, newPass)
        ret0, _ := ret[0].(error)
        return ret0
}

// ChangeUserPasswordDB indicates an expected call of ChangeUserPasswordDB.
func (mr *MockUserStoreInterfaceMockRecorder) ChangeUserPasswordDB(userID, newPass interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPasswordDB", reflect.TypeOf((*MockUserStoreInterface)(nil).ChangeUserPasswordDB), userID, newPass)
}

// DeleteUsersAddress mocks base method.
func (m *MockUserStoreInterface) DeleteUsersAddress(addressID int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteUsersAddress", addressID)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteUsersAddress indicates an expected call of DeleteUsersAddress.
func (mr *MockUserStoreInterfaceMockRecorder) DeleteUsersAddress(addressID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsersAddress", reflect.TypeOf((*MockUserStoreInterface)(nil).DeleteUsersAddress), addressID)
}

// DeleteUsersPayment mocks base method.
func (m *MockUserStoreInterface) DeleteUsersPayment(paymentID int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteUsersPayment", paymentID)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteUsersPayment indicates an expected call of DeleteUsersPayment.
func (mr *MockUserStoreInterfaceMockRecorder) DeleteUsersPayment(paymentID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsersPayment", reflect.TypeOf((*MockUserStoreInterface)(nil).DeleteUsersPayment), paymentID)
}

// GetAddressesByUserIDFromDB mocks base method.
func (m *MockUserStoreInterface) GetAddressesByUserIDFromDB(userID int) ([]*model.Address, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetAddressesByUserIDFromDB", userID)
        ret0, _ := ret[0].([]*model.Address)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetAddressesByUserIDFromDB indicates an expected call of GetAddressesByUserIDFromDB.
func (mr *MockUserStoreInterfaceMockRecorder) GetAddressesByUserIDFromDB(userID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressesByUserIDFromDB", reflect.TypeOf((*MockUserStoreInterface)(nil).GetAddressesByUserIDFromDB), userID)
}

// GetPaymentMethodByUserIDFromDB mocks base method.
func (m *MockUserStoreInterface) GetPaymentMethodByUserIDFromDB(userID int) ([]*model.PaymentMethod, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetPaymentMethodByUserIDFromDB", userID)
        ret0, _ := ret[0].([]*model.PaymentMethod)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetPaymentMethodByUserIDFromDB indicates an expected call of GetPaymentMethodByUserIDFromDB.
func (mr *MockUserStoreInterfaceMockRecorder) GetPaymentMethodByUserIDFromDB(userID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMethodByUserIDFromDB", reflect.TypeOf((*MockUserStoreInterface)(nil).GetPaymentMethodByUserIDFromDB), userID)
}

// GetUserByUsernameFromDB mocks base method.
func (m *MockUserStoreInterface) GetUserByUsernameFromDB(userEmail string) (*model.UserDB, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUserByUsernameFromDB", userEmail)
        ret0, _ := ret[0].(*model.UserDB)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetUserByUsernameFromDB indicates an expected call of GetUserByUsernameFromDB.
func (mr *MockUserStoreInterfaceMockRecorder) GetUserByUsernameFromDB(userEmail interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameFromDB", reflect.TypeOf((*MockUserStoreInterface)(nil).GetUserByUsernameFromDB), userEmail)
}

// GetUsernameAndAvatarByIDFromDB mocks base method.
func (m *MockUserStoreInterface) GetUsernameAndAvatarByIDFromDB(userID int) (string, string, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUsernameAndAvatarByIDFromDB", userID)
        ret0, _ := ret[0].(string)
        ret1, _ := ret[1].(string)
        ret2, _ := ret[2].(error)
        return ret0, ret1, ret2
}

// GetUsernameAndAvatarByIDFromDB indicates an expected call of GetUsernameAndAvatarByIDFromDB.
func (mr *MockUserStoreInterfaceMockRecorder) GetUsernameAndAvatarByIDFromDB(userID interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernameAndAvatarByIDFromDB", reflect.TypeOf((*MockUserStoreInterface)(nil).GetUsernameAndAvatarByIDFromDB), userID)
}

// UpdateUser mocks base method.
func (m *MockUserStoreInterface) UpdateUser(userID int, in *model.UserProfile) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateUser", userID, in)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserStoreInterfaceMockRecorder) UpdateUser(userID, in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserStoreInterface)(nil).UpdateUser), userID, in)
}

// UpdateUsersAddress mocks base method.
func (m *MockUserStoreInterface) UpdateUsersAddress(adressID int, in *model.Address) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateUsersAddress", adressID, in)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateUsersAddress indicates an expected call of UpdateUsersAddress.
func (mr *MockUserStoreInterfaceMockRecorder) UpdateUsersAddress(adressID, in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersAddress", reflect.TypeOf((*MockUserStoreInterface)(nil).UpdateUsersAddress), adressID, in)
}

// UpdateUsersPayment mocks base method.
func (m *MockUserStoreInterface) UpdateUsersPayment(paymentID int, in *model.PaymentMethod) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateUsersPayment", paymentID, in)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateUsersPayment indicates an expected call of UpdateUsersPayment.
func (mr *MockUserStoreInterfaceMockRecorder) UpdateUsersPayment(paymentID, in interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersPayment", reflect.TypeOf((*MockUserStoreInterface)(nil).UpdateUsersPayment), paymentID, in)
}