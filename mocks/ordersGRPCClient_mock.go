// Code generated by MockGen. DO NOT EDIT.
// Source: orders_grpc.pb.go

// Package mock_orders is a generated GoMock package.
package mocks

import (
        context "context"
        reflect "reflect"
        orders "serv/microservices/orders/gen_files"

        gomock "github.com/golang/mock/gomock"
        grpc "google.golang.org/grpc"
)

// MockOrdersWorkerClient is a mock of OrdersWorkerClient interface.
type MockOrdersWorkerClient struct {
        ctrl     *gomock.Controller
        recorder *MockOrdersWorkerClientMockRecorder
}

// MockOrdersWorkerClientMockRecorder is the mock recorder for MockOrdersWorkerClient.
type MockOrdersWorkerClientMockRecorder struct {
        mock *MockOrdersWorkerClient
}

// NewMockOrdersWorkerClient creates a new mock instance.
func NewMockOrdersWorkerClient(ctrl *gomock.Controller) *MockOrdersWorkerClient {
        mock := &MockOrdersWorkerClient{ctrl: ctrl}
        mock.recorder = &MockOrdersWorkerClientMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersWorkerClient) EXPECT() *MockOrdersWorkerClientMockRecorder {
        return m.recorder
}

// ChangeOrderStatus mocks base method.
func (m *MockOrdersWorkerClient) ChangeOrderStatus(ctx context.Context, in *orders.ChangeOrderStatusType, opts ...grpc.CallOption) (*orders.Nothing, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{ctx, in}
        for _, a := range opts {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "ChangeOrderStatus", varargs...)
        ret0, _ := ret[0].(*orders.Nothing)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// ChangeOrderStatus indicates an expected call of ChangeOrderStatus.
func (mr *MockOrdersWorkerClientMockRecorder) ChangeOrderStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{ctx, in}, opts...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderStatus", reflect.TypeOf((*MockOrdersWorkerClient)(nil).ChangeOrderStatus), varargs...)
}

// GetOrders mocks base method.
func (m *MockOrdersWorkerClient) GetOrders(ctx context.Context, in *orders.UserID, opts ...grpc.CallOption) (*orders.OrdersResponse, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{ctx, in}
        for _, a := range opts {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "GetOrders", varargs...)
        ret0, _ := ret[0].(*orders.OrdersResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrdersWorkerClientMockRecorder) GetOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{ctx, in}, opts...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrdersWorkerClient)(nil).GetOrders), varargs...)
}

// MakeOrder mocks base method.
func (m *MockOrdersWorkerClient) MakeOrder(ctx context.Context, in *orders.MakeOrderType, opts ...grpc.CallOption) (*orders.Nothing, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{ctx, in}
        for _, a := range opts {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "MakeOrder", varargs...)
        ret0, _ := ret[0].(*orders.Nothing)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// MakeOrder indicates an expected call of MakeOrder.
func (mr *MockOrdersWorkerClientMockRecorder) MakeOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{ctx, in}, opts...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrder", reflect.TypeOf((*MockOrdersWorkerClient)(nil).MakeOrder), varargs...)
}

// MockOrdersWorkerServer is a mock of OrdersWorkerServer interface.
type MockOrdersWorkerServer struct {
        ctrl     *gomock.Controller
        recorder *MockOrdersWorkerServerMockRecorder
}

// MockOrdersWorkerServerMockRecorder is the mock recorder for MockOrdersWorkerServer.
type MockOrdersWorkerServerMockRecorder struct {
        mock *MockOrdersWorkerServer
}

// NewMockOrdersWorkerServer creates a new mock instance.
func NewMockOrdersWorkerServer(ctrl *gomock.Controller) *MockOrdersWorkerServer {
        mock := &MockOrdersWorkerServer{ctrl: ctrl}
        mock.recorder = &MockOrdersWorkerServerMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersWorkerServer) EXPECT() *MockOrdersWorkerServerMockRecorder {
        return m.recorder
}

// ChangeOrderStatus mocks base method.
func (m *MockOrdersWorkerServer) ChangeOrderStatus(arg0 context.Context, arg1 *orders.ChangeOrderStatusType) (*orders.Nothing, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ChangeOrderStatus", arg0, arg1)
        ret0, _ := ret[0].(*orders.Nothing)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// ChangeOrderStatus indicates an expected call of ChangeOrderStatus.
func (mr *MockOrdersWorkerServerMockRecorder) ChangeOrderStatus(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderStatus", reflect.TypeOf((*MockOrdersWorkerServer)(nil).ChangeOrderStatus), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockOrdersWorkerServer) GetOrders(arg0 context.Context, arg1 *orders.UserID) (*orders.OrdersResponse, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
        ret0, _ := ret[0].(*orders.OrdersResponse)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrdersWorkerServerMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrdersWorkerServer)(nil).GetOrders), arg0, arg1)
}

// MakeOrder mocks base method.
func (m *MockOrdersWorkerServer) MakeOrder(arg0 context.Context, arg1 *orders.MakeOrderType) (*orders.Nothing, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "MakeOrder", arg0, arg1)
        ret0, _ := ret[0].(*orders.Nothing)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// MakeOrder indicates an expected call of MakeOrder.
func (mr *MockOrdersWorkerServerMockRecorder) MakeOrder(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeOrder", reflect.TypeOf((*MockOrdersWorkerServer)(nil).MakeOrder), arg0, arg1)
}

// mustEmbedUnimplementedOrdersWorkerServer mocks base method.
func (m *MockOrdersWorkerServer) mustEmbedUnimplementedOrdersWorkerServer() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "mustEmbedUnimplementedOrdersWorkerServer")
}

// mustEmbedUnimplementedOrdersWorkerServer indicates an expected call of mustEmbedUnimplementedOrdersWorkerServer.
func (mr *MockOrdersWorkerServerMockRecorder) mustEmbedUnimplementedOrdersWorkerServer() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrdersWorkerServer", reflect.TypeOf((*MockOrdersWorkerServer)(nil).mustEmbedUnimplementedOrdersWorkerServer))
}

// MockUnsafeOrdersWorkerServer is a mock of UnsafeOrdersWorkerServer interface.
type MockUnsafeOrdersWorkerServer struct {
        ctrl     *gomock.Controller
        recorder *MockUnsafeOrdersWorkerServerMockRecorder
}

// MockUnsafeOrdersWorkerServerMockRecorder is the mock recorder for MockUnsafeOrdersWorkerServer.
type MockUnsafeOrdersWorkerServerMockRecorder struct {
        mock *MockUnsafeOrdersWorkerServer
}

// NewMockUnsafeOrdersWorkerServer creates a new mock instance.
func NewMockUnsafeOrdersWorkerServer(ctrl *gomock.Controller) *MockUnsafeOrdersWorkerServer {
        mock := &MockUnsafeOrdersWorkerServer{ctrl: ctrl}
        mock.recorder = &MockUnsafeOrdersWorkerServerMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrdersWorkerServer) EXPECT() *MockUnsafeOrdersWorkerServerMockRecorder {
        return m.recorder
}

// mustEmbedUnimplementedOrdersWorkerServer mocks base method.
func (m *MockUnsafeOrdersWorkerServer) mustEmbedUnimplementedOrdersWorkerServer() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "mustEmbedUnimplementedOrdersWorkerServer")
}

// mustEmbedUnimplementedOrdersWorkerServer indicates an expected call of mustEmbedUnimplementedOrdersWorkerServer.
func (mr *MockUnsafeOrdersWorkerServerMockRecorder) mustEmbedUnimplementedOrdersWorkerServer() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrdersWorkerServer", reflect.TypeOf((*MockUnsafeOrdersWorkerServer)(nil).mustEmbedUnimplementedOrdersWorkerServer))
}